}
if (data.min.max$minimo[i]<data.min.max$minimo[i-1]) {
R[i,]<-data.min.max%>%
filter(maximo==max(maximo[(i-1):1]))%>%
select(maximo,date.max)
M[i,]<-data%>%
filter(date>=as.Date(R$date.max[i]),month==month(as.Date(R$date.max[i])),
year==year(as.Date(R$date.max[i])))%>%
filter(low==min(low))%>%
select(minimo=low,date.min=date)
mes.RR[i]<-data.min.max$date.max[which.max(maximo>R$maximo[i])]
dataMesRR<-filter(data,date>=R[i,2],date<=mes.RR[i])
date.RR[i]<-dataMesRR$date[which.max(dataMesRR$high>R$maximo[i])]
soporte[i,]<-data.min.max%>%
filter(minimo==min(minimo[i]))%>%
select(minimo,date.min)
if (soporte$minimo[i]>M$minimo[i]) {soporte[i,]<-M[i,]}
}
}
# calcula soportes, R y fecha de RR pero repites valores de
# de Resistencia y fechas de RR( hay que filtrar)
data.sop.res<-cbind(soporte,R,date.RR)
data.sop.res$date.min<-as.Date(data.sop.res$date.min)
data.sop.res$date.max<-as.Date(data.sop.res$date.max)
data.sop.res$date.RR<-as.Date(data.sop.res$date.RR)
head(data.sop.res)
# Remove all NA
data.sop.res<-data.sop.res[!is.na(data.sop.res)[1:n],]
head(data.sop.res)
# agrupo por fechas iguales de RR para luego filtar los
# mínimos (soportes)
sop.res<-data.sop.res%>%
group_by(date.RR)%>%
filter(minimo==min(minimo))
names(sop.res)<-c("soporte","date.sop","resistencia","date.R","date.RR")
sop.res
# si al final solo marca resistencia mete un NA en la última fecha (date.RR),
s<-length(sop.res$date.RR)
if(s==1) {sop.res$date.RR[s]<-NA}
if(s!=1) {
if (sop.res$date.RR[s]<sop.res$date.RR[s-1] ) {sop.res$date.RR[s]<-NA}
}
# Calcula las entradas por rotura de resistencias, el SC, SV e inversión
l<-length(sop.res$soporte)
stop.c.v<-sop.res %>%
mutate(sc=resistencia+0.01, sv=soporte*0.97,saltoStop=NA,
stocks=round(riesgo*capital/(sc-soporte)), inversion=stocks*sv)
if (l>=2) {stop.c.v$saltoStop[2:l]<-stop.c.v$soporte[2:l]-stop.c.v$sv[1:l-1]} # da error con
# el ticker AAVL
stop.c.v
# calcula cuando salta el stop en cada entrada.
m<-length(stop.c.v$soporte)
dateSaltoStop<-as.Date(c(rep(NA,m)))
if (m>1) {
for (i in 2:m) {
if (stop.c.v$saltoStop[i]<=0) {
minPosteriores<-(filter(data, date>stop.c.v$date.sop[i-1]))%>%
filter(low<stop.c.v$sv[i-1])
dateSaltoStop[i-1]<-minPosteriores$date[1]
}
}
}
dateSaltoStop<-as.Date(dateSaltoStop)
entradaSalidas<-mutate(stop.c.v, dateSaltoStop=dateSaltoStop )
entradaSalidas
entradaSalidas<-unique(entradaSalidas)
## crea una columna nueva de si y no de salto de stop
saltoElStop<-as.character(entradaSalidas$dateSaltoStop)
for (i in 1:length(saltoElStop)) {
if (is.na(saltoElStop[i])) {
saltoElStop[i]<-c("NO")
} else saltoElStop[i]<-c("SI")
}
entradaSalidas<-mutate(entradaSalidas, saltoElStop=as.factor(saltoElStop))
entradaSalidas
# calcula la volatilidad en funcion de la distancia entre compra y venta
entradaSalidas<-mutate(entradaSalidas, volatilidad= round(((sc-sv)/sc*100),digits=2))
# loop calcula todos los saltos de stops de las entradas
saltos<-which(!is.na(entradaSalidas$dateSaltoStop))
entradaSalidasNuevas<-entradaSalidas$dateSaltoStop
if (any(!is.na((entradaSalidas$dateSaltoStop)))) {
for (i in length(saltos):1) {
entradaSalidasNuevas[saltos[i]:1]<-entradaSalidas$dateSaltoStop[saltos[i]]
if ( !is.na(entradaSalidas$dateSaltoStop[i])) {
}
}
}
company<-c(rep(companyTicker, length(entradaSalidas$dateSaltoStop)))
entradaSalidas<-mutate(entradaSalidas, saltoStop=entradaSalidasNuevas, company=company)
# selecciona y cambia nombre de columnas
datos<-select(entradaSalidas, company, stopCompra=sc, stopVenta=sv, stocks, inversion,
volatilidad, fechaCompra= date.RR, fechaSoporte=date.sop, saltoStop,
saltoDeStop= saltoElStop )
datos
###################################################
rentabilidad<-c(rep("NA", length(datos$stopCompra)))
m<-length(datos$saltoDeStop)
for(i in m:1) {
if (datos$saltoDeStop[i]=="NO" & i==m) {
rentabilidad[(i-1):1]<-round(((datos$stopVenta[i]-datos$stopCompra[(i-1):1])/
(datos$stopCompra[(i-1):1])*100),digits=2)
}
if (datos$saltoDeStop[i]=="SI" & i!=1) {
rentabilidad[i]<--riesgo*100
rentabilidad[(i-1):1]<-round(((datos$stopVenta[i]-datos$stopCompra[(i-1):1])/
(datos$stopCompra[(i-1):1])*100),digits=2)
}
if (datos$saltoDeStop[i]=="NO" & i==m) {rentabilidad[i]<-0}
if (datos$saltoDeStop[i]=="SI" & i==1) {rentabilidad[i]<-0}
}
dataFinal<-mutate(datos, rentabilidad = rentabilidad)
dataFinal
dateSaltoStop
entradaSalidas
entradaSalidas<-unique(entradaSalidas)
entradaSalidas
stop.c.v
stop.c.v<-unique(stop.c.v)
stop.c.v
sop.res
sop.res<-unique(sop.res)
sop.res
try(assign(z,(adjustOHLC((get(z,pos=.GlobalEnv)),adjust=c("split","dividend"),
use.Adjusted=TRUE))))
head(get(z))
index.ticker<-index(get(z))
# Get the length de data montly for loop
# La idea es hacer un loop con n igual al numero de meses
# pero sobre los datos diarios de la accion para tener en
# cuenta las envolventes
data.daily<-as.data.frame(get(z))
data.daily<-select(data.daily,2,3,5)
names(data.daily)<-c("high","low","volume")
data.daily<-mutate(data.daily,date=as.Date((index.ticker)))
row.names(data.daily)<-index(index.ticker)
data.daily<-select(data.daily,4,2,1,3)
companyTicker<-z
# Tidy data datos en diarios como data frame
data<-tbl_df(data.daily)
data
# Añade dos columnas numericas con el mes y el año.
data<-data%>%
mutate(month=month(date), year=year(date))%>%
select(date,month,year,low,high,volume)
data
# paso el index a mensual y calculo numero de meses
años<-unique(data$year)
meses<-unique(data$month)
m<-as.Date(unique(as.yearmon(index.ticker)))
n<-length(m)
# comienza un loop desde 1 a n, obtiene los maximos y minimos de cada mes.
minimo<-c()
maximo<-c()
date.min<-as.Date(c(rep(NA,n)))
date.max<-as.Date(c(rep(NA,n)))
for (i in 1:n) {
data.filter<-filter(data, month==month(m[i]) & year==year(m[i]))
minimo[i]<-min(data.filter$low)
maximo[i]<-max(data.filter$high)
date.min[i]<-(filter(data.filter, low==minimo[i]))$date
date.max[i]<-(filter(data.filter, high==maximo[i]))$date
}
# Datos de min y max de cada mes con sus fechas de ocurrencia.
data.min.max<-tbl_df(cbind(as.data.frame(date.min),minimo,as.data.frame(date.max),maximo))
data.min.max
# si no existe min<min entonces salta al siguiente ticker
if (all(diff(data.min.max$minimo)>0)) {next}
# loop encontrar R, fecha de RR y soporte (está calculando mal el soporte cuando el max y
# min coinciden en la misma barra)
soporte<-as.data.frame(matrix(data=NA,nrow=n,ncol=2,dimnames=list(c(),c("minimo","date.min"))))
R<-as.data.frame(matrix(data=NA,nrow=n,ncol=2,dimnames=list(c(),c("maximo","date.max"))))
M<-as.data.frame(matrix(data=NA,nrow=n,ncol=2,dimnames=list(c(),c("minimo","date.min"))))
date.RR<-c(rep(NA,n))
mes.RR<-c(rep(NA,n))
for (i in 2:(n-1)) {
# comprueba si hay envolvente
if (data.min.max$minimo[i]<data.min.max$minimo[i-1] &
data.min.max$maximo[i]>data.min.max$maximo[i-1] &
max(data.min.max$maximo[1:i-1])<data.min.max$maximo[i])
{ envolventeYear<-year(data.min.max$date.min[i])
envolventeMonth<-month(data.min.max$date.min[i])
envolventeDatos<-filter(data,month(date)==envolventeMonth,year(date)==
envolventeYear)
fechaMinimo<-envolventeDatos$date[which.max(envolventeDatos$low<data.min.max$minimo[i-1])]
fechaMaximo<-envolventeDatos$date[which.max(envolventeDatos$high>data.min.max$maximo[i-1])]
if(fechaMinimo>fechaMaximo){ R[i,]<-data.min.max%>%
filter(maximo==max(maximo[i]))%>%
select(maximo,date.max)
M[i,]<-data%>%
filter(date>=as.Date(R$date.max[i]),
month==month(as.Date(R$date.max[i])),
year==year(as.Date(R$date.max[i])))%>%
filter(low==min(low))%>%
select(minimo=low,date.min=date)
mes.RR[i]<-data.min.max$date.max[which.max(maximo>R$maximo[i])]
dataMesRR<-filter(data,date>=R[i,2],date<=mes.RR[i])
date.RR[i]<-dataMesRR$date[which.max(dataMesRR$high>R$maximo[i])]
soporte[i,]<-data.min.max%>%
filter(minimo==min(minimo[i]))%>%
select(minimo,date.min)
if (soporte$minimo[i]>M$minimo[i]) {soporte[i,]<-M[i,]}
next}
}
if (data.min.max$minimo[i]<data.min.max$minimo[i-1]) {
R[i,]<-data.min.max%>%
filter(maximo==max(maximo[(i-1):1]))%>%
select(maximo,date.max)
M[i,]<-data%>%
filter(date>=as.Date(R$date.max[i]),month==month(as.Date(R$date.max[i])),
year==year(as.Date(R$date.max[i])))%>%
filter(low==min(low))%>%
select(minimo=low,date.min=date)
mes.RR[i]<-data.min.max$date.max[which.max(maximo>R$maximo[i])]
dataMesRR<-filter(data,date>=R[i,2],date<=mes.RR[i])
date.RR[i]<-dataMesRR$date[which.max(dataMesRR$high>R$maximo[i])]
soporte[i,]<-data.min.max%>%
filter(minimo==min(minimo[i]))%>%
select(minimo,date.min)
if (soporte$minimo[i]>M$minimo[i]) {soporte[i,]<-M[i,]}
}
}
# calcula soportes, R y fecha de RR pero repites valores de
# de Resistencia y fechas de RR( hay que filtrar)
data.sop.res<-cbind(soporte,R,date.RR)
data.sop.res$date.min<-as.Date(data.sop.res$date.min)
data.sop.res$date.max<-as.Date(data.sop.res$date.max)
data.sop.res$date.RR<-as.Date(data.sop.res$date.RR)
head(data.sop.res)
# Remove all NA
data.sop.res<-data.sop.res[!is.na(data.sop.res)[1:n],]
head(data.sop.res)
# agrupo por fechas iguales de RR para luego filtar los
# mínimos (soportes)
sop.res<-data.sop.res%>%
group_by(date.RR)%>%
filter(minimo==min(minimo))
names(sop.res)<-c("soporte","date.sop","resistencia","date.R","date.RR")
sop.res
sop.res<-unique(sop.res)
# si al final solo marca resistencia mete un NA en la última fecha (date.RR),
s<-length(sop.res$date.RR)
if(s==1) {sop.res$date.RR[s]<-NA}
if(s!=1) {
if (sop.res$date.RR[s]<sop.res$date.RR[s-1] ) {sop.res$date.RR[s]<-NA}
}
# Calcula las entradas por rotura de resistencias, el SC, SV e inversión
l<-length(sop.res$soporte)
stop.c.v<-sop.res %>%
mutate(sc=resistencia+0.01, sv=soporte*0.97,saltoStop=NA,
stocks=round(riesgo*capital/(sc-soporte)), inversion=stocks*sv)
if (l>=2) {stop.c.v$saltoStop[2:l]<-stop.c.v$soporte[2:l]-stop.c.v$sv[1:l-1]} # da error con
# el ticker AAVL
stop.c.v
# calcula cuando salta el stop en cada entrada.
m<-length(stop.c.v$soporte)
dateSaltoStop<-as.Date(c(rep(NA,m)))
if (m>1) {
for (i in 2:m) {
if (stop.c.v$saltoStop[i]<=0) {
minPosteriores<-(filter(data, date>stop.c.v$date.sop[i-1]))%>%
filter(low<stop.c.v$sv[i-1])
dateSaltoStop[i-1]<-minPosteriores$date[1]
}
}
}
dateSaltoStop<-as.Date(dateSaltoStop)
entradaSalidas<-mutate(stop.c.v, dateSaltoStop=dateSaltoStop )
entradaSalidas
## crea una columna nueva de si y no de salto de stop
saltoElStop<-as.character(entradaSalidas$dateSaltoStop)
for (i in 1:length(saltoElStop)) {
if (is.na(saltoElStop[i])) {
saltoElStop[i]<-c("NO")
} else saltoElStop[i]<-c("SI")
}
entradaSalidas<-mutate(entradaSalidas, saltoElStop=as.factor(saltoElStop))
entradaSalidas
# calcula la volatilidad en funcion de la distancia entre compra y venta
entradaSalidas<-mutate(entradaSalidas, volatilidad= round(((sc-sv)/sc*100),digits=2))
# loop calcula todos los saltos de stops de las entradas
saltos<-which(!is.na(entradaSalidas$dateSaltoStop))
entradaSalidasNuevas<-entradaSalidas$dateSaltoStop
if (any(!is.na((entradaSalidas$dateSaltoStop)))) {
for (i in length(saltos):1) {
entradaSalidasNuevas[saltos[i]:1]<-entradaSalidas$dateSaltoStop[saltos[i]]
if ( !is.na(entradaSalidas$dateSaltoStop[i])) {
}
}
}
company<-c(rep(companyTicker, length(entradaSalidas$dateSaltoStop)))
entradaSalidas<-mutate(entradaSalidas, saltoStop=entradaSalidasNuevas, company=company)
# selecciona y cambia nombre de columnas
datos<-select(entradaSalidas, company, stopCompra=sc, stopVenta=sv, stocks, inversion,
volatilidad, fechaCompra= date.RR, fechaSoporte=date.sop, saltoStop,
saltoDeStop= saltoElStop )
datos
###################################################
rentabilidad<-c(rep("NA", length(datos$stopCompra)))
m<-length(datos$saltoDeStop)
for(i in m:1) {
if (datos$saltoDeStop[i]=="NO" & i==m) {
rentabilidad[(i-1):1]<-round(((datos$stopVenta[i]-datos$stopCompra[(i-1):1])/
(datos$stopCompra[(i-1):1])*100),digits=2)
}
if (datos$saltoDeStop[i]=="SI" & i!=1) {
rentabilidad[i]<--riesgo*100
rentabilidad[(i-1):1]<-round(((datos$stopVenta[i]-datos$stopCompra[(i-1):1])/
(datos$stopCompra[(i-1):1])*100),digits=2)
}
if (datos$saltoDeStop[i]=="NO" & i==m) {rentabilidad[i]<-0}
if (datos$saltoDeStop[i]=="SI" & i==1) {rentabilidad[i]<-0}
}
dataFinal<-mutate(datos, rentabilidad = rentabilidad)
dataFinal
AMGN
z<-"AMGN"
try(assign(z,(adjustOHLC((get(z,pos=.GlobalEnv)),adjust=c("split","dividend"),
use.Adjusted=TRUE))))
head(get(z))
index.ticker<-index(get(z))
# Get the length de data montly for loop
# La idea es hacer un loop con n igual al numero de meses
# pero sobre los datos diarios de la accion para tener en
# cuenta las envolventes
data.daily<-as.data.frame(get(z))
data.daily<-select(data.daily,2,3,5)
names(data.daily)<-c("high","low","volume")
data.daily<-mutate(data.daily,date=as.Date((index.ticker)))
row.names(data.daily)<-index(index.ticker)
data.daily<-select(data.daily,4,2,1,3)
companyTicker<-z
# Tidy data datos en diarios como data frame
data<-tbl_df(data.daily)
data
# Añade dos columnas numericas con el mes y el año.
data<-data%>%
mutate(month=month(date), year=year(date))%>%
select(date,month,year,low,high,volume)
data
# paso el index a mensual y calculo numero de meses
años<-unique(data$year)
meses<-unique(data$month)
m<-as.Date(unique(as.yearmon(index.ticker)))
n<-length(m)
# comienza un loop desde 1 a n, obtiene los maximos y minimos de cada mes.
minimo<-c()
maximo<-c()
date.min<-as.Date(c(rep(NA,n)))
date.max<-as.Date(c(rep(NA,n)))
for (i in 1:n) {
data.filter<-filter(data, month==month(m[i]) & year==year(m[i]))
minimo[i]<-min(data.filter$low)
maximo[i]<-max(data.filter$high)
date.min[i]<-(filter(data.filter, low==minimo[i]))$date
date.max[i]<-(filter(data.filter, high==maximo[i]))$date
}
# Datos de min y max de cada mes con sus fechas de ocurrencia.
data.min.max<-tbl_df(cbind(as.data.frame(date.min),minimo,as.data.frame(date.max),maximo))
data.min.max
# si no existe min<min entonces salta al siguiente ticker
if (all(diff(data.min.max$minimo)>0)) {next}
# loop encontrar R, fecha de RR y soporte (está calculando mal el soporte cuando el max y
# min coinciden en la misma barra)
soporte<-as.data.frame(matrix(data=NA,nrow=n,ncol=2,dimnames=list(c(),c("minimo","date.min"))))
R<-as.data.frame(matrix(data=NA,nrow=n,ncol=2,dimnames=list(c(),c("maximo","date.max"))))
M<-as.data.frame(matrix(data=NA,nrow=n,ncol=2,dimnames=list(c(),c("minimo","date.min"))))
date.RR<-c(rep(NA,n))
mes.RR<-c(rep(NA,n))
for (i in 2:(n-1)) {
# comprueba si hay envolvente
if (data.min.max$minimo[i]<data.min.max$minimo[i-1] &
data.min.max$maximo[i]>data.min.max$maximo[i-1] &
max(data.min.max$maximo[1:i-1])<data.min.max$maximo[i])
{ envolventeYear<-year(data.min.max$date.min[i])
envolventeMonth<-month(data.min.max$date.min[i])
envolventeDatos<-filter(data,month(date)==envolventeMonth,year(date)==
envolventeYear)
fechaMinimo<-envolventeDatos$date[which.max(envolventeDatos$low<data.min.max$minimo[i-1])]
fechaMaximo<-envolventeDatos$date[which.max(envolventeDatos$high>data.min.max$maximo[i-1])]
if(fechaMinimo>fechaMaximo){ R[i,]<-data.min.max%>%
filter(maximo==max(maximo[i]))%>%
select(maximo,date.max)
M[i,]<-data%>%
filter(date>=as.Date(R$date.max[i]),
month==month(as.Date(R$date.max[i])),
year==year(as.Date(R$date.max[i])))%>%
filter(low==min(low))%>%
select(minimo=low,date.min=date)
mes.RR[i]<-data.min.max$date.max[which.max(maximo>R$maximo[i])]
dataMesRR<-filter(data,date>=R[i,2],date<=mes.RR[i])
date.RR[i]<-dataMesRR$date[which.max(dataMesRR$high>R$maximo[i])]
soporte[i,]<-data.min.max%>%
filter(minimo==min(minimo[i]))%>%
select(minimo,date.min)
if (soporte$minimo[i]>M$minimo[i]) {soporte[i,]<-M[i,]}
next}
}
if (data.min.max$minimo[i]<data.min.max$minimo[i-1]) {
R[i,]<-data.min.max%>%
filter(maximo==max(maximo[(i-1):1]))%>%
select(maximo,date.max)
M[i,]<-data%>%
filter(date>=as.Date(R$date.max[i]),month==month(as.Date(R$date.max[i])),
year==year(as.Date(R$date.max[i])))%>%
filter(low==min(low))%>%
select(minimo=low,date.min=date)
mes.RR[i]<-data.min.max$date.max[which.max(maximo>R$maximo[i])]
dataMesRR<-filter(data,date>=R[i,2],date<=mes.RR[i])
date.RR[i]<-dataMesRR$date[which.max(dataMesRR$high>R$maximo[i])]
soporte[i,]<-data.min.max%>%
filter(minimo==min(minimo[i]))%>%
select(minimo,date.min)
if (soporte$minimo[i]>M$minimo[i]) {soporte[i,]<-M[i,]}
}
}
# calcula soportes, R y fecha de RR pero repites valores de
# de Resistencia y fechas de RR( hay que filtrar)
data.sop.res<-cbind(soporte,R,date.RR)
data.sop.res$date.min<-as.Date(data.sop.res$date.min)
data.sop.res$date.max<-as.Date(data.sop.res$date.max)
data.sop.res$date.RR<-as.Date(data.sop.res$date.RR)
head(data.sop.res)
# Remove all NA
data.sop.res<-data.sop.res[!is.na(data.sop.res)[1:n],]
head(data.sop.res)
# agrupo por fechas iguales de RR para luego filtar los
# mínimos (soportes)
sop.res<-data.sop.res%>%
group_by(date.RR)%>%
filter(minimo==min(minimo))
names(sop.res)<-c("soporte","date.sop","resistencia","date.R","date.RR")
sop.res
sop.res<-unique(sop.res)
# si al final solo marca resistencia mete un NA en la última fecha (date.RR),
s<-length(sop.res$date.RR)
if(s==1) {sop.res$date.RR[s]<-NA}
if(s!=1) {
if (sop.res$date.RR[s]<sop.res$date.RR[s-1] ) {sop.res$date.RR[s]<-NA}
}
# Calcula las entradas por rotura de resistencias, el SC, SV e inversión
l<-length(sop.res$soporte)
stop.c.v<-sop.res %>%
mutate(sc=resistencia+0.01, sv=soporte*0.97,saltoStop=NA,
stocks=round(riesgo*capital/(sc-soporte)), inversion=stocks*sv)
if (l>=2) {stop.c.v$saltoStop[2:l]<-stop.c.v$soporte[2:l]-stop.c.v$sv[1:l-1]} # da error con
# el ticker AAVL
stop.c.v
# calcula cuando salta el stop en cada entrada.
m<-length(stop.c.v$soporte)
dateSaltoStop<-as.Date(c(rep(NA,m)))
if (m>1) {
for (i in 2:m) {
if (stop.c.v$saltoStop[i]<=0) {
minPosteriores<-(filter(data, date>stop.c.v$date.sop[i-1]))%>%
filter(low<stop.c.v$sv[i-1])
dateSaltoStop[i-1]<-minPosteriores$date[1]
}
}
}
dateSaltoStop<-as.Date(dateSaltoStop)
entradaSalidas<-mutate(stop.c.v, dateSaltoStop=dateSaltoStop )
entradaSalidas
## crea una columna nueva de si y no de salto de stop
saltoElStop<-as.character(entradaSalidas$dateSaltoStop)
for (i in 1:length(saltoElStop)) {
if (is.na(saltoElStop[i])) {
saltoElStop[i]<-c("NO")
} else saltoElStop[i]<-c("SI")
}
entradaSalidas<-mutate(entradaSalidas, saltoElStop=as.factor(saltoElStop))
entradaSalidas
# calcula la volatilidad en funcion de la distancia entre compra y venta
entradaSalidas<-mutate(entradaSalidas, volatilidad= round(((sc-sv)/sc*100),digits=2))
# loop calcula todos los saltos de stops de las entradas
saltos<-which(!is.na(entradaSalidas$dateSaltoStop))
entradaSalidasNuevas<-entradaSalidas$dateSaltoStop
if (any(!is.na((entradaSalidas$dateSaltoStop)))) {
for (i in length(saltos):1) {
entradaSalidasNuevas[saltos[i]:1]<-entradaSalidas$dateSaltoStop[saltos[i]]
if ( !is.na(entradaSalidas$dateSaltoStop[i])) {
}
}
}
company<-c(rep(companyTicker, length(entradaSalidas$dateSaltoStop)))
entradaSalidas<-mutate(entradaSalidas, saltoStop=entradaSalidasNuevas, company=company)
# selecciona y cambia nombre de columnas
datos<-select(entradaSalidas, company, stopCompra=sc, stopVenta=sv, stocks, inversion,
volatilidad, fechaCompra= date.RR, fechaSoporte=date.sop, saltoStop,
saltoDeStop= saltoElStop )
datos
###################################################
rentabilidad<-c(rep("NA", length(datos$stopCompra)))
m<-length(datos$saltoDeStop)
for(i in m:1) {
if (datos$saltoDeStop[i]=="NO" & i==m) {
rentabilidad[(i-1):1]<-round(((datos$stopVenta[i]-datos$stopCompra[(i-1):1])/
(datos$stopCompra[(i-1):1])*100),digits=2)
}
if (datos$saltoDeStop[i]=="SI" & i!=1) {
rentabilidad[i]<--riesgo*100
rentabilidad[(i-1):1]<-round(((datos$stopVenta[i]-datos$stopCompra[(i-1):1])/
(datos$stopCompra[(i-1):1])*100),digits=2)
}
if (datos$saltoDeStop[i]=="NO" & i==m) {rentabilidad[i]<-0}
if (datos$saltoDeStop[i]=="SI" & i==1) {rentabilidad[i]<-0}
}
dataFinal<-mutate(datos, rentabilidad = rentabilidad)
dataFinal
setwd("C:/Users/JORGE/Desktop/coursera R/Reproducible Research/RepData_PeerAssessment1")
library("knitr", lib.loc="~/R/win-library/3.1")
knitr2html("PA1_template.Rmd", "PA1_template.html")
knit2html("PA1_template.Rmd", "PA1_template.html")
